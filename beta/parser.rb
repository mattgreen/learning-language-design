#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer'
require_relative 'ast'

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 56)
def parse(code, show_tokens = false)
  @tokens = Lexer.new.tokenize(code)
  puts @tokens.inspect if show_tokens
  do_parse
end

def next_token
  @tokens.shift
end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     9,    12,    10,    11,    12,    18,    19,    14,     7,
    21,    13,     8,     9,    13,    10,    11,    18,    19,     8,
     9,     7,    10,    11,   nil,   nil,     8,     9,     7,    10,
    11,   nil,   nil,     8,     9,     7,    10,    11,   nil,   nil,
     8,     9,     7,    10,    11,   nil,   nil,     8,     9,     7,
    10,    11,    18,    19,    16,    17,     7,    27,    18,    19,
    16,    17,    18,    19,    16,    17 ]

racc_action_check = [
     0,     0,     0,     0,     0,     2,    23,    23,     1,     0,
    14,     0,    19,    19,     2,    19,    19,    24,    24,    18,
    18,    19,    18,    18,   nil,   nil,     7,     7,    18,     7,
     7,   nil,   nil,    17,    17,     7,    17,    17,   nil,   nil,
    15,    15,    17,    15,    15,   nil,   nil,    16,    16,    15,
    16,    16,    20,    20,    20,    20,    16,    20,     3,     3,
     3,     3,    22,    22,    22,    22 ]

racc_action_pointer = [
    -2,     8,     1,    51,   nil,   nil,   nil,    24,   nil,   nil,
   nil,   nil,   nil,   nil,    10,    38,    45,    31,    17,    10,
    45,   nil,    55,    -1,    10,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -20,    -2,    -3,    -6,    -7,    -8,   -20,   -10,   -11,
   -12,   -13,   -18,   -19,   -20,    -5,   -20,   -20,   -20,   -20,
   -20,    28,    -4,   -14,   -15,   -16,   -17,    -9 ]

racc_goto_table = [
     3,     4,     2,    15,     1,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,    23,    24,    25,    26 ]

racc_goto_check = [
     3,     4,     2,     4,     1,   nil,   nil,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     3,     3,     3,     3,     3 ]

racc_goto_pointer = [
   nil,     4,     2,     0,     1,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 15, :_reduce_1,
  1, 15, :_reduce_2,
  1, 16, :_reduce_3,
  3, 16, :_reduce_4,
  2, 16, :_reduce_5,
  1, 16, :_reduce_6,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  3, 17, :_reduce_9,
  1, 19, :_reduce_10,
  1, 19, :_reduce_11,
  1, 19, :_reduce_12,
  1, 19, :_reduce_13,
  3, 20, :_reduce_14,
  3, 20, :_reduce_15,
  3, 20, :_reduce_16,
  3, 20, :_reduce_17,
  1, 18, :_reduce_none,
  1, 18, :_reduce_none ]

racc_reduce_n = 20

racc_shift_n = 28

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :STRING => 3,
  :NEWLINE => 4,
  :TRUE => 5,
  :FALSE => 6,
  "*" => 7,
  "/" => 8,
  "+" => 9,
  "-" => 10,
  "(" => 11,
  ")" => 12,
  ";" => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "STRING",
  "NEWLINE",
  "TRUE",
  "FALSE",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Operator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 14)
  def _reduce_1(val, _values, result)
     result = AST.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 15)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 19)
  def _reduce_3(val, _values, result)
     result = AST.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 20)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 21)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_6(val, _values, result)
     result = AST.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_9(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_10(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_11(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_12(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_13(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_14(val, _values, result)
     result = AddNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_15(val, _values, result)
     result = SubNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_16(val, _values, result)
     result = MulNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_17(val, _values, result)
     result = DivNode.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 18 omitted

# reduce 19 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

if __FILE__ == $0
  puts Parser.new.parse(File.read(ARGV[0])).inspect
end
