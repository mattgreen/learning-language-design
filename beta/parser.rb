#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer'
require_relative 'ast'

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 72)
def parse(code, show_tokens = false)
  @tokens = Lexer.new.tokenize(code)
  puts @tokens.inspect if show_tokens
  do_parse
end

def next_token
  @tokens.shift
end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    12,    16,    13,    14,    15,    16,    25,    18,    26,
    10,    11,    12,    17,    13,    14,    15,    17,    27,    11,
    12,    10,    13,    14,    15,    22,    23,    11,    12,    10,
    13,    14,    15,    22,    23,    11,    12,    10,    13,    14,
    15,   nil,   nil,    11,    12,    10,    13,    14,    15,   nil,
   nil,    11,    12,    10,    13,    14,    15,   nil,   nil,    11,
    12,    10,    13,    14,    15,   nil,   nil,    11,    12,    10,
    13,    14,    15,    22,    23,    20,    21,    10,    33,    22,
    23,    20,    21,   nil,    36,    22,    23,    20,    21,    22,
    23,    20,    21,    22,    23,    20,    21 ]

racc_action_check = [
     0,     0,     0,     0,     0,     0,     2,    15,     1,    15,
     0,    10,    10,     0,    10,    10,    10,     2,    18,    25,
    25,    10,    25,    25,    25,    29,    29,    26,    26,    25,
    26,    26,    26,    30,    30,    23,    23,    26,    23,    23,
    23,   nil,   nil,    21,    21,    23,    21,    21,    21,   nil,
   nil,    19,    19,    21,    19,    19,    19,   nil,   nil,    20,
    20,    19,    20,    20,    20,   nil,   nil,    22,    22,    20,
    22,    22,    22,    24,    24,    24,    24,    22,    24,    34,
    34,    34,    34,   nil,    34,    35,    35,    35,    35,     3,
     3,     3,     3,    28,    28,    28,    28 ]

racc_action_pointer = [
    -2,     8,     2,    81,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   nil,   nil,    -5,   nil,   nil,    18,    49,
    57,    41,    65,    33,    65,    17,    25,   nil,    85,    17,
    25,   nil,   nil,   nil,    71,    77,   nil ]

racc_action_default = [
    -1,   -26,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -26,   -13,   -14,   -15,   -16,   -22,   -24,   -25,   -26,    -5,
   -26,   -26,   -26,   -26,   -26,   -26,   -26,    37,    -4,   -17,
   -18,   -19,   -20,   -12,   -26,   -23,   -21 ]

racc_goto_table = [
     3,     4,     2,    19,     1,   nil,   nil,   nil,   nil,   nil,
    24,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    28,
    29,    30,    31,    32,   nil,    34,    35 ]

racc_goto_check = [
     3,     4,     2,     4,     1,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
     3,     3,     3,     3,   nil,     3,     3 ]

racc_goto_pointer = [
   nil,     4,     2,     0,     1,   nil,   nil,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,     6,     7,     8,     9 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 17, :_reduce_1,
  1, 17, :_reduce_2,
  1, 18, :_reduce_3,
  3, 18, :_reduce_4,
  2, 18, :_reduce_5,
  1, 18, :_reduce_6,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  3, 19, :_reduce_12,
  1, 21, :_reduce_13,
  1, 21, :_reduce_14,
  1, 21, :_reduce_15,
  1, 21, :_reduce_16,
  3, 22, :_reduce_17,
  3, 22, :_reduce_18,
  3, 22, :_reduce_19,
  3, 22, :_reduce_20,
  4, 23, :_reduce_21,
  1, 24, :_reduce_22,
  3, 25, :_reduce_23,
  1, 20, :_reduce_none,
  1, 20, :_reduce_none ]

racc_reduce_n = 26

racc_shift_n = 37

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :STRING => 3,
  :NEWLINE => 4,
  :TRUE => 5,
  :FALSE => 6,
  :IDENTIFIER => 7,
  "*" => 8,
  "/" => 9,
  "+" => 10,
  "-" => 11,
  "(" => 12,
  ")" => 13,
  "=" => 14,
  ";" => 15 }

racc_nt_base = 16

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "STRING",
  "NEWLINE",
  "TRUE",
  "FALSE",
  "IDENTIFIER",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"(\"",
  "\")\"",
  "\"=\"",
  "\";\"",
  "$start",
  "Program",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Operator",
  "Call",
  "GetLocal",
  "SetLocal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 15)
  def _reduce_1(val, _values, result)
     result = AST.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 16)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 20)
  def _reduce_3(val, _values, result)
     result = AST.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 21)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_6(val, _values, result)
     result = AST.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_12(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_13(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_14(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_15(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_16(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_17(val, _values, result)
     result = AddNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_18(val, _values, result)
     result = SubNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_19(val, _values, result)
     result = MulNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_20(val, _values, result)
     result = DivNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_21(val, _values, result)
     result = CallNode.new(val[0], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_22(val, _values, result)
     result = GetLocalNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_23(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 24 omitted

# reduce 25 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

if __FILE__ == $0
  puts Parser.new.parse(File.read(ARGV[0])).inspect
end
