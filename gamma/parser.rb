#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'pp'
require_relative 'lexer'
require_relative 'ast'

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 130)
def parse(code, show_tokens = false)
  @tokens = Lexer.new.tokenize(code)
  puts @tokens.inspect if show_tokens
  do_parse
end

def next_token
  @tokens.shift
end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    15,    16,    24,    17,    18,    20,    21,    70,    24,    22,
    23,    19,    15,    16,    24,    17,    18,    20,    21,    31,
    32,    22,    23,    19,    31,    32,    14,    24,    25,    24,
    24,    24,    77,    84,    25,    83,    74,    73,    14,    50,
    25,    15,    16,    24,    17,    18,    20,    21,    48,    26,
    22,    23,    19,    25,    75,    25,    25,    25,    31,    32,
    29,    30,    35,    36,    33,    34,    46,    14,    45,    25,
    15,    16,    24,    17,    18,    20,    21,    86,    45,    22,
    23,    19,    31,    32,    29,    30,    35,    36,    33,    34,
    37,    38,    39,    40,   nil,    82,    14,    81,    25,    15,
    16,    24,    17,    18,    20,    21,   nil,   nil,    22,    23,
    19,    15,    16,    24,    17,    18,    20,    21,   nil,   nil,
    22,    23,    19,   nil,    72,    14,    71,    25,   nil,    15,
    16,   nil,    17,    18,    42,   nil,   nil,    14,   nil,    25,
    19,    15,    16,   nil,    17,    18,    42,    31,    32,    29,
    30,   nil,    19,    24,   nil,    14,    66,    15,    16,    87,
    17,    18,    42,    31,    32,    29,    30,    14,    19,    15,
    16,   nil,    17,    18,    42,    31,    32,    29,    30,    25,
    19,    15,    16,    14,    17,    18,    20,    21,   nil,   nil,
    22,    23,    19,    15,    16,    14,    17,    18,    42,    31,
    32,    29,    30,   nil,    19,    15,    16,    14,    17,    18,
    42,   nil,   nil,   nil,   nil,   nil,    19,    15,    16,    14,
    17,    18,    42,   nil,   nil,   nil,   nil,   nil,    19,    15,
    16,    14,    17,    18,    42,   nil,   nil,   nil,   nil,   nil,
    19,    15,    16,    14,    17,    18,    42,   nil,   nil,   nil,
   nil,   nil,    19,    15,    16,    14,    17,    18,    42,   nil,
   nil,   nil,   nil,   nil,    19,    15,    16,    14,    17,    18,
    42,   nil,   nil,   nil,   nil,   nil,    19,    15,    16,    14,
    17,    18,    42,   nil,   nil,   nil,   nil,   nil,    19,    15,
    16,    14,    17,    18,    42,   nil,   nil,   nil,   nil,   nil,
    19,    15,    16,    14,    17,    18,    42,   nil,   nil,   nil,
   nil,   nil,    19,    15,    16,    14,    17,    18,    42,   nil,
   nil,   nil,   nil,   nil,    19,    15,    16,    14,    17,    18,
    42,   nil,   nil,   nil,   nil,   nil,    19,    15,    16,    14,
    17,    18,    42,   nil,   nil,   nil,   nil,   nil,    19,    15,
    16,    14,    17,    18,    42,   nil,   nil,   nil,   nil,   nil,
    19,    15,    16,    14,    17,    18,    42,   nil,   nil,   nil,
   nil,   nil,    19,   nil,   nil,    14,    31,    32,    29,    30,
    35,    36,    33,    34,    37,    38,    39,    14,    31,    32,
    29,    30,    35,    36,    33,    34,    37,    38,    39,    40,
   nil,   nil,   nil,    64,    31,    32,    29,    30,    35,    36,
    33,    34,    37,    38,    39,    40,    31,    32,    29,    30,
    35,    36,    33,    34,    37,    38,    39,    40,    31,    32,
    29,    30,    35,    36,    33,    34,    37,    38,    39,    40,
    31,    32,    29,    30,    35,    36,    33,    34,    37,    38,
    39,    40,    31,    32,    29,    30,    35,    36,    33,    34,
    37,    38,    39,    40,    31,    32,    29,    30,    35,    36,
    33,    34,    37,    38,    31,    32,    29,    30,    35,    36,
    33,    34 ]

racc_action_check = [
     0,     0,     0,     0,     0,     0,     0,    48,    28,     0,
     0,     0,    81,    81,    81,    81,    81,    81,    81,    53,
    53,    81,    81,    81,    52,    52,     0,    80,     0,    79,
     2,    69,    70,    80,    28,    79,    69,    69,    81,    26,
    81,    75,    75,    75,    75,    75,    75,    75,    22,     1,
    75,    75,    75,    80,    70,    79,     2,    69,    60,    60,
    60,    60,    60,    60,    60,    60,    20,    75,    20,    75,
    47,    47,    47,    47,    47,    47,    47,    82,    42,    47,
    47,    47,    47,    47,    47,    47,    47,    47,    47,    47,
    47,    47,    47,    47,   nil,    76,    47,    76,    47,    74,
    74,    74,    74,    74,    74,    74,   nil,   nil,    74,    74,
    74,     4,     4,     4,     4,     4,     4,     4,   nil,   nil,
     4,     4,     4,   nil,    67,    74,    67,    74,   nil,    45,
    45,   nil,    45,    45,    45,   nil,   nil,     4,   nil,     4,
    45,    46,    46,   nil,    46,    46,    46,    56,    56,    56,
    56,   nil,    46,    85,   nil,    45,    45,    21,    21,    85,
    21,    21,    21,    59,    59,    59,    59,    46,    21,    23,
    23,   nil,    23,    23,    23,    57,    57,    57,    57,    85,
    23,    27,    27,    21,    27,    27,    27,    27,   nil,   nil,
    27,    27,    27,    29,    29,    23,    29,    29,    29,    58,
    58,    58,    58,   nil,    29,    30,    30,    27,    30,    30,
    30,   nil,   nil,   nil,   nil,   nil,    30,    31,    31,    29,
    31,    31,    31,   nil,   nil,   nil,   nil,   nil,    31,    32,
    32,    30,    32,    32,    32,   nil,   nil,   nil,   nil,   nil,
    32,    33,    33,    31,    33,    33,    33,   nil,   nil,   nil,
   nil,   nil,    33,    34,    34,    32,    34,    34,    34,   nil,
   nil,   nil,   nil,   nil,    34,    35,    35,    33,    35,    35,
    35,   nil,   nil,   nil,   nil,   nil,    35,    36,    36,    34,
    36,    36,    36,   nil,   nil,   nil,   nil,   nil,    36,    37,
    37,    35,    37,    37,    37,   nil,   nil,   nil,   nil,   nil,
    37,    38,    38,    36,    38,    38,    38,   nil,   nil,   nil,
   nil,   nil,    38,    39,    39,    37,    39,    39,    39,   nil,
   nil,   nil,   nil,   nil,    39,    40,    40,    38,    40,    40,
    40,   nil,   nil,   nil,   nil,   nil,    40,    72,    72,    39,
    72,    72,    72,   nil,   nil,   nil,   nil,   nil,    72,    19,
    19,    40,    19,    19,    19,   nil,   nil,   nil,   nil,   nil,
    19,    14,    14,    72,    14,    14,    14,   nil,   nil,   nil,
   nil,   nil,    14,   nil,   nil,    19,    63,    63,    63,    63,
    63,    63,    63,    63,    63,    63,    63,    14,    41,    41,
    41,    41,    41,    41,    41,    41,    41,    41,    41,    41,
   nil,   nil,   nil,    41,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    78,    78,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    68,    68,    68,    68,    68,    68,    68,    68,
    68,    68,    68,    68,    62,    62,    62,    62,    62,    62,
    62,    62,    62,    62,    61,    61,    61,    61,    61,    61,
    61,    61 ]

racc_action_pointer = [
    -2,    49,    26,   nil,   109,   390,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   359,   nil,   nil,   nil,   nil,   347,
    40,   155,    41,   167,   nil,   nil,    39,   179,     4,   191,
   203,   215,   227,   239,   251,   263,   275,   287,   299,   311,
   323,   374,    50,   nil,   nil,   127,   139,    68,   -21,   402,
   nil,   nil,    10,     5,   nil,   nil,   133,   161,   185,   149,
    44,   460,   450,   362,   nil,   426,   nil,    97,   438,    27,
    25,   nil,   335,   nil,    97,    39,    68,   nil,   414,    25,
    23,    10,    70,   nil,   nil,   149,   nil,   nil ]

racc_action_default = [
    -1,   -52,    -2,    -3,    -7,    -8,    -9,   -10,   -11,   -12,
   -13,   -14,   -15,   -16,   -52,   -18,   -19,   -20,   -21,   -52,
   -40,   -52,   -52,   -48,   -50,   -51,   -52,    -5,    -6,   -52,
   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,
   -52,   -52,   -40,   -34,   -35,   -52,   -52,   -52,   -52,   -49,
    88,    -4,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,
   -30,   -31,   -32,   -33,   -17,   -38,   -36,   -52,   -41,   -52,
   -52,   -37,   -52,   -42,   -52,   -52,   -52,   -46,   -39,   -52,
   -52,   -52,   -52,   -43,   -44,   -52,   -47,   -45 ]

racc_goto_table = [
    27,     2,     1,    51,    67,    28,    76,   nil,   nil,   nil,
   nil,   nil,    41,   nil,   nil,   nil,   nil,    43,   nil,    47,
   nil,    49,   nil,   nil,   nil,   nil,    27,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,   nil,
   nil,   nil,   nil,    65,    68,   nil,   nil,   nil,    69,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,
    78,   nil,   nil,   nil,   nil,    79,    80,    27,    27,   nil,
   nil,   nil,    85,    27 ]

racc_goto_check = [
     4,     2,     1,     3,    15,     2,    16,   nil,   nil,   nil,
   nil,   nil,     5,   nil,   nil,   nil,   nil,     5,   nil,     5,
   nil,     5,   nil,   nil,   nil,   nil,     4,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,   nil,
   nil,   nil,   nil,     5,     5,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
     5,   nil,   nil,   nil,   nil,     2,     2,     4,     4,   nil,
   nil,   nil,     2,     4 ]

racc_goto_pointer = [
   nil,     2,     1,   -24,    -2,    -2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -41,   -64 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    44,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 32, :_reduce_1,
  1, 32, :_reduce_2,
  1, 33, :_reduce_3,
  3, 33, :_reduce_4,
  2, 33, :_reduce_5,
  2, 33, :_reduce_6,
  1, 33, :_reduce_7,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 34, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  1, 36, :_reduce_none,
  3, 36, :_reduce_17,
  1, 41, :_reduce_18,
  1, 41, :_reduce_19,
  1, 41, :_reduce_20,
  1, 41, :_reduce_21,
  3, 42, :_reduce_22,
  3, 42, :_reduce_23,
  3, 42, :_reduce_24,
  3, 42, :_reduce_25,
  3, 42, :_reduce_26,
  3, 42, :_reduce_27,
  3, 42, :_reduce_28,
  3, 42, :_reduce_29,
  3, 42, :_reduce_30,
  3, 42, :_reduce_31,
  3, 42, :_reduce_32,
  3, 42, :_reduce_33,
  2, 42, :_reduce_34,
  2, 43, :_reduce_35,
  2, 45, :_reduce_36,
  3, 45, :_reduce_37,
  1, 46, :_reduce_38,
  3, 46, :_reduce_39,
  1, 44, :_reduce_40,
  3, 38, :_reduce_41,
  4, 37, :_reduce_42,
  6, 37, :_reduce_43,
  6, 39, :_reduce_44,
  7, 39, :_reduce_45,
  1, 47, :_reduce_46,
  3, 47, :_reduce_47,
  1, 40, :_reduce_48,
  2, 40, :_reduce_49,
  1, 35, :_reduce_none,
  1, 35, :_reduce_none ]

racc_reduce_n = 52

racc_shift_n = 88

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :STRING => 3,
  :NEWLINE => 4,
  :TRUE => 5,
  :FALSE => 6,
  :IDENTIFIER => 7,
  :IF => 8,
  :ELSE => 9,
  :END => 10,
  :DEF => 11,
  :RETURN => 12,
  "!" => 13,
  "*" => 14,
  "/" => 15,
  "+" => 16,
  "-" => 17,
  ">" => 18,
  ">=" => 19,
  "<" => 20,
  "<=" => 21,
  "==" => 22,
  "!=" => 23,
  "&&" => 24,
  "||" => 25,
  "=" => 26,
  "," => 27,
  "(" => 28,
  ")" => 29,
  ";" => 30 }

racc_nt_base = 31

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "STRING",
  "NEWLINE",
  "TRUE",
  "FALSE",
  "IDENTIFIER",
  "IF",
  "ELSE",
  "END",
  "DEF",
  "RETURN",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "$start",
  "Program",
  "Statements",
  "Statement",
  "Terminator",
  "Expression",
  "If",
  "SetLocal",
  "Function",
  "Return",
  "Literal",
  "Operator",
  "Call",
  "GetLocal",
  "Arguments",
  "Args",
  "Params" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_1(val, _values, result)
     result = AST.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 26)
  def _reduce_2(val, _values, result)
     result = AST.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 30)
  def _reduce_3(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_6(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_7(val, _values, result)
     result = [] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_18(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_19(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_20(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_21(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_22(val, _values, result)
     result = AddNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_23(val, _values, result)
     result = SubNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_24(val, _values, result)
     result = MulNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_25(val, _values, result)
     result = DivNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_26(val, _values, result)
     result = LessThanNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_27(val, _values, result)
     result = LessThanEqNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_28(val, _values, result)
     result = GreaterThanNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_29(val, _values, result)
     result = GreaterThanEqNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_30(val, _values, result)
     result = EqNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 70)
  def _reduce_31(val, _values, result)
     result = NotEqNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_32(val, _values, result)
     result = AndNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_33(val, _values, result)
     result = OrNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_34(val, _values, result)
     result = NotNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_36(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_37(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_38(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_39(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_40(val, _values, result)
     result = GetLocalNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_41(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_42(val, _values, result)
     result = IfNode.new(val[1], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_43(val, _values, result)
     result = IfNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_44(val, _values, result)
     result = DefNode.new(val[1], [], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_45(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_46(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_47(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_48(val, _values, result)
     result = ReturnNode.new(nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_49(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

if __FILE__ == $0
  pp Parser.new.parse(File.read(ARGV[0]))
end
